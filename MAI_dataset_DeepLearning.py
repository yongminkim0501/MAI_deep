{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyP7abTqwS1EMedAX8s8deD5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yongminkim0501/MAI_deep/blob/main/MAI_dataset_DeepLearning.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "ZjjWPRNsKRKx"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive\n",
        "from tensorflow.keras.layers import Conv2D, BatchNormalization, Activation, MaxPool2D, Conv2DTranspose, Concatenate, Input, Flatten,Dense\n",
        "from tensorflow.keras.models import Model\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "drive.mount(\"/content/drive\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rLdCl0UkKpfY",
        "outputId": "3589f918-d535-4510-e64a-7502aa806717"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cd /content/drive/MyDrive/MAI_dataset/open/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nio3nrBQcSei",
        "outputId": "8f9c7f52-7fca-4da0-fde3-8162e00d6a00"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/MAI_dataset/open\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "drive_path = \"/content/drive/MyDrive/\"\n",
        "source_file_path = drive_path + \"MAI_dataset/open/\"\n",
        "\n",
        "test_file = \"test/\"\n",
        "train_file = \"file/\"\n",
        "test_df = pd.read_csv('test.csv')\n",
        "train_df = pd.read_csv('train.csv')"
      ],
      "metadata": {
        "id": "TI-JCt47K3zi"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "mx8GG2bLMEpT",
        "outputId": "c95c7464-b3dd-46a2-946a-4e0dfcb580be"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           ID                    path  AL645608.7      HES4  TNFRSF18  \\\n",
              "0  TRAIN_0000  ./train/TRAIN_0000.png    0.000506  0.010635 -0.000213   \n",
              "1  TRAIN_0001  ./train/TRAIN_0001.png    0.000506  0.010635 -0.000213   \n",
              "2  TRAIN_0002  ./train/TRAIN_0002.png   -0.000415  0.005658 -0.000413   \n",
              "3  TRAIN_0003  ./train/TRAIN_0003.png   -0.000855  0.004366  0.000684   \n",
              "4  TRAIN_0004  ./train/TRAIN_0004.png    0.000506  0.010635 -0.000213   \n",
              "\n",
              "    TNFRSF4      SDF4     ACAP3    INTS11     MXRA8  ...   MT-ATP8   MT-ATP6  \\\n",
              "0 -0.000846  1.512467  0.021131  0.024409  0.004109  ... -0.168265  2.858198   \n",
              "1 -0.000846  1.508787  0.021131  0.024409  0.004109  ... -0.168265  2.392524   \n",
              "2  0.003148  0.109204  0.013978  0.049823  0.005327  ...  0.189374  2.730253   \n",
              "3  0.000865  0.503090  0.295115  0.303922 -0.004290  ... -0.158511  2.753111   \n",
              "4 -0.000846  0.905195  0.021131  1.597454  0.004109  ...  1.097993  3.760496   \n",
              "\n",
              "     MT-CO3    MT-ND3   MT-ND4L    MT-ND4    MT-ND5    MT-CYB  BX004987.1  \\\n",
              "0  3.154686  2.283563  0.417627  2.639062  0.809258  2.053162   -0.000464   \n",
              "1  3.103424  2.462341  0.552690  3.089195  0.578029  2.488428   -0.000464   \n",
              "2  3.212037  0.377279  0.340573  3.359260  1.935161  2.502990    0.000598   \n",
              "3  2.892158  2.218189  0.677302  2.601587  1.150156  2.198914    0.000307   \n",
              "4  3.801140  3.460122  1.641039  3.735806  1.666373  3.408605    0.820977   \n",
              "\n",
              "   AL592183.1  \n",
              "0   -0.000459  \n",
              "1   -0.000459  \n",
              "2    0.002011  \n",
              "3    0.001789  \n",
              "4   -0.000459  \n",
              "\n",
              "[5 rows x 3469 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a41cb4f9-cd36-4e20-901a-306043b1b467\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>path</th>\n",
              "      <th>AL645608.7</th>\n",
              "      <th>HES4</th>\n",
              "      <th>TNFRSF18</th>\n",
              "      <th>TNFRSF4</th>\n",
              "      <th>SDF4</th>\n",
              "      <th>ACAP3</th>\n",
              "      <th>INTS11</th>\n",
              "      <th>MXRA8</th>\n",
              "      <th>...</th>\n",
              "      <th>MT-ATP8</th>\n",
              "      <th>MT-ATP6</th>\n",
              "      <th>MT-CO3</th>\n",
              "      <th>MT-ND3</th>\n",
              "      <th>MT-ND4L</th>\n",
              "      <th>MT-ND4</th>\n",
              "      <th>MT-ND5</th>\n",
              "      <th>MT-CYB</th>\n",
              "      <th>BX004987.1</th>\n",
              "      <th>AL592183.1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TRAIN_0000</td>\n",
              "      <td>./train/TRAIN_0000.png</td>\n",
              "      <td>0.000506</td>\n",
              "      <td>0.010635</td>\n",
              "      <td>-0.000213</td>\n",
              "      <td>-0.000846</td>\n",
              "      <td>1.512467</td>\n",
              "      <td>0.021131</td>\n",
              "      <td>0.024409</td>\n",
              "      <td>0.004109</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.168265</td>\n",
              "      <td>2.858198</td>\n",
              "      <td>3.154686</td>\n",
              "      <td>2.283563</td>\n",
              "      <td>0.417627</td>\n",
              "      <td>2.639062</td>\n",
              "      <td>0.809258</td>\n",
              "      <td>2.053162</td>\n",
              "      <td>-0.000464</td>\n",
              "      <td>-0.000459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TRAIN_0001</td>\n",
              "      <td>./train/TRAIN_0001.png</td>\n",
              "      <td>0.000506</td>\n",
              "      <td>0.010635</td>\n",
              "      <td>-0.000213</td>\n",
              "      <td>-0.000846</td>\n",
              "      <td>1.508787</td>\n",
              "      <td>0.021131</td>\n",
              "      <td>0.024409</td>\n",
              "      <td>0.004109</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.168265</td>\n",
              "      <td>2.392524</td>\n",
              "      <td>3.103424</td>\n",
              "      <td>2.462341</td>\n",
              "      <td>0.552690</td>\n",
              "      <td>3.089195</td>\n",
              "      <td>0.578029</td>\n",
              "      <td>2.488428</td>\n",
              "      <td>-0.000464</td>\n",
              "      <td>-0.000459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TRAIN_0002</td>\n",
              "      <td>./train/TRAIN_0002.png</td>\n",
              "      <td>-0.000415</td>\n",
              "      <td>0.005658</td>\n",
              "      <td>-0.000413</td>\n",
              "      <td>0.003148</td>\n",
              "      <td>0.109204</td>\n",
              "      <td>0.013978</td>\n",
              "      <td>0.049823</td>\n",
              "      <td>0.005327</td>\n",
              "      <td>...</td>\n",
              "      <td>0.189374</td>\n",
              "      <td>2.730253</td>\n",
              "      <td>3.212037</td>\n",
              "      <td>0.377279</td>\n",
              "      <td>0.340573</td>\n",
              "      <td>3.359260</td>\n",
              "      <td>1.935161</td>\n",
              "      <td>2.502990</td>\n",
              "      <td>0.000598</td>\n",
              "      <td>0.002011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TRAIN_0003</td>\n",
              "      <td>./train/TRAIN_0003.png</td>\n",
              "      <td>-0.000855</td>\n",
              "      <td>0.004366</td>\n",
              "      <td>0.000684</td>\n",
              "      <td>0.000865</td>\n",
              "      <td>0.503090</td>\n",
              "      <td>0.295115</td>\n",
              "      <td>0.303922</td>\n",
              "      <td>-0.004290</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.158511</td>\n",
              "      <td>2.753111</td>\n",
              "      <td>2.892158</td>\n",
              "      <td>2.218189</td>\n",
              "      <td>0.677302</td>\n",
              "      <td>2.601587</td>\n",
              "      <td>1.150156</td>\n",
              "      <td>2.198914</td>\n",
              "      <td>0.000307</td>\n",
              "      <td>0.001789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TRAIN_0004</td>\n",
              "      <td>./train/TRAIN_0004.png</td>\n",
              "      <td>0.000506</td>\n",
              "      <td>0.010635</td>\n",
              "      <td>-0.000213</td>\n",
              "      <td>-0.000846</td>\n",
              "      <td>0.905195</td>\n",
              "      <td>0.021131</td>\n",
              "      <td>1.597454</td>\n",
              "      <td>0.004109</td>\n",
              "      <td>...</td>\n",
              "      <td>1.097993</td>\n",
              "      <td>3.760496</td>\n",
              "      <td>3.801140</td>\n",
              "      <td>3.460122</td>\n",
              "      <td>1.641039</td>\n",
              "      <td>3.735806</td>\n",
              "      <td>1.666373</td>\n",
              "      <td>3.408605</td>\n",
              "      <td>0.820977</td>\n",
              "      <td>-0.000459</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 3469 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a41cb4f9-cd36-4e20-901a-306043b1b467')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a41cb4f9-cd36-4e20-901a-306043b1b467 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a41cb4f9-cd36-4e20-901a-306043b1b467');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-820d540b-1c62-4bf0-b420-809d41cd4e5e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-820d540b-1c62-4bf0-b420-809d41cd4e5e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-820d540b-1c62-4bf0-b420-809d41cd4e5e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_df"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U6peGHHAMKmm",
        "outputId": "8afe183a-38a9-4a44-d1e5-90cd19c28e8d"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['ID', 'path', 'AL645608.7', 'HES4', 'TNFRSF18', 'TNFRSF4', 'SDF4',\n",
              "       'ACAP3', 'INTS11', 'MXRA8',\n",
              "       ...\n",
              "       'MT-ATP8', 'MT-ATP6', 'MT-CO3', 'MT-ND3', 'MT-ND4L', 'MT-ND4', 'MT-ND5',\n",
              "       'MT-CYB', 'BX004987.1', 'AL592183.1'],\n",
              "      dtype='object', length=3469)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df[['ID','AL645608.7','HES4']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "ZC1DsetaMX3v",
        "outputId": "03d56ddc-4aa1-4eb3-ff60-fa02c1c61b9f"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              ID  AL645608.7      HES4\n",
              "0     TRAIN_0000    0.000506  0.010635\n",
              "1     TRAIN_0001    0.000506  0.010635\n",
              "2     TRAIN_0002   -0.000415  0.005658\n",
              "3     TRAIN_0003   -0.000855  0.004366\n",
              "4     TRAIN_0004    0.000506  0.010635\n",
              "...          ...         ...       ...\n",
              "6987  TRAIN_6987    0.000506  0.010635\n",
              "6988  TRAIN_6988   -0.000415  0.005658\n",
              "6989  TRAIN_6989   -0.000415  0.005658\n",
              "6990  TRAIN_6990   -0.000415  0.005658\n",
              "6991  TRAIN_6991   -0.000855  0.004366\n",
              "\n",
              "[6992 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a4b3b5d-4614-40c1-a9bb-29dd72214562\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>AL645608.7</th>\n",
              "      <th>HES4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TRAIN_0000</td>\n",
              "      <td>0.000506</td>\n",
              "      <td>0.010635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TRAIN_0001</td>\n",
              "      <td>0.000506</td>\n",
              "      <td>0.010635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TRAIN_0002</td>\n",
              "      <td>-0.000415</td>\n",
              "      <td>0.005658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TRAIN_0003</td>\n",
              "      <td>-0.000855</td>\n",
              "      <td>0.004366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TRAIN_0004</td>\n",
              "      <td>0.000506</td>\n",
              "      <td>0.010635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6987</th>\n",
              "      <td>TRAIN_6987</td>\n",
              "      <td>0.000506</td>\n",
              "      <td>0.010635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6988</th>\n",
              "      <td>TRAIN_6988</td>\n",
              "      <td>-0.000415</td>\n",
              "      <td>0.005658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6989</th>\n",
              "      <td>TRAIN_6989</td>\n",
              "      <td>-0.000415</td>\n",
              "      <td>0.005658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6990</th>\n",
              "      <td>TRAIN_6990</td>\n",
              "      <td>-0.000415</td>\n",
              "      <td>0.005658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6991</th>\n",
              "      <td>TRAIN_6991</td>\n",
              "      <td>-0.000855</td>\n",
              "      <td>0.004366</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6992 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a4b3b5d-4614-40c1-a9bb-29dd72214562')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6a4b3b5d-4614-40c1-a9bb-29dd72214562 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6a4b3b5d-4614-40c1-a9bb-29dd72214562');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0226b6f9-f646-4d97-bfa9-f9a058747c2d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0226b6f9-f646-4d97-bfa9-f9a058747c2d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0226b6f9-f646-4d97-bfa9-f9a058747c2d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"train_df[['ID','AL645608\",\n  \"rows\": 6992,\n  \"fields\": [\n    {\n      \"column\": \"ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6992,\n        \"samples\": [\n          \"TRAIN_4498\",\n          \"TRAIN_3936\",\n          \"TRAIN_5059\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AL645608.7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04290370390979947,\n        \"min\": -0.00085536996,\n        \"max\": 1.6654084,\n        \"num_unique_values\": 673,\n        \"samples\": [\n          0.0005064891,\n          0.00050640403,\n          -0.0004154939\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HES4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16279141668523323,\n        \"min\": 0.00010398964,\n        \"max\": 2.4219015,\n        \"num_unique_values\": 1026,\n        \"samples\": [\n          0.304115,\n          0.004365812,\n          0.7330882\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns\n",
        "from matplotlib.ticker import MaxNLocator\n",
        "fig=plt.figure(figsize=(10,3), dpi=100)\n",
        "ax1=fig.subplots()\n",
        "ax1.xaxis.set_major_locator(MaxNLocator(integer=True))\n",
        "sns.lineplot(data = train_df, x='ID', y = 'AL645608.7', ci = None, ax = ax1)\n",
        "ax1.legend(bbox_to_anchor=(1.02,1), loc=2)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "FU38p2DCNgFF",
        "outputId": "0fcc8793-991e-4296-cd63-304d2d79f323"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-22-da6e6943c650>:6: FutureWarning: \n",
            "\n",
            "The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n",
            "\n",
            "  sns.lineplot(data = train_df, x='ID', y = 'AL645608.7', ci = None, ax = ax1)\n",
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7e733e44d0f0>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "column_index = train_df.columns.get_loc('AL645608.7')"
      ],
      "metadata": {
        "id": "dJ1Ow30ZPE8V"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "id_column_index = 0\n",
        "max_value = train_df['AL645608.7'].max()\n",
        "max_row = train_df[train_df['AL645608.7'] == max_value]\n",
        "\n",
        "for index, row in max_row.iterrows():\n",
        "  print(f\"ID: {row[id_column_index]}, AL645608.7: {row['AL645608.7']}\")\n",
        "# AL645608.7 열의 최댓값과 그 최댓값을 갖고 있는 ID를 출력해주는 코드"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TBBWjQbJQaCc",
        "outputId": "c1f1ef9b-55cf-463d-e63c-d40f5c593ff4"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ID: TRAIN_0797, AL645608.7: 1.6654084\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-25-4d9697e06aaf>:6: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  print(f\"ID: {row[id_column_index]}, AL645608.7: {row['AL645608.7']}\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_100_al645608 = train_df.nlargest(100, 'AL645608.7')\n",
        "\n",
        "for index, row in top_100_al645608.iterrows():\n",
        "  print(f\"ID: {row[id_column_index]}, AL645608.7: {row['AL645608.7']}\")\n",
        "  #AL645608.7의 최댓값 100개를 보여주는 코드"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iitJNr0zRwew",
        "outputId": "45ce4a7a-5c8c-4061-b7fb-03576e4eaf45"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ID: TRAIN_0797, AL645608.7: 1.6654084\n",
            "ID: TRAIN_6467, AL645608.7: 1.0128055\n",
            "ID: TRAIN_4786, AL645608.7: 1.0095758\n",
            "ID: TRAIN_1908, AL645608.7: 0.98414385\n",
            "ID: TRAIN_0234, AL645608.7: 0.9023127\n",
            "ID: TRAIN_0485, AL645608.7: 0.8668663\n",
            "ID: TRAIN_0730, AL645608.7: 0.82152975\n",
            "ID: TRAIN_3078, AL645608.7: 0.7898228\n",
            "ID: TRAIN_0124, AL645608.7: 0.7470888\n",
            "ID: TRAIN_4741, AL645608.7: 0.74112236\n",
            "ID: TRAIN_6526, AL645608.7: 0.7060523\n",
            "ID: TRAIN_1113, AL645608.7: 0.67979574\n",
            "ID: TRAIN_3908, AL645608.7: 0.6342701\n",
            "ID: TRAIN_4912, AL645608.7: 0.62997186\n",
            "ID: TRAIN_1872, AL645608.7: 0.6241619\n",
            "ID: TRAIN_2858, AL645608.7: 0.523522\n",
            "ID: TRAIN_2432, AL645608.7: 0.50321263\n",
            "ID: TRAIN_6974, AL645608.7: 0.4871294\n",
            "ID: TRAIN_3810, AL645608.7: 0.33212936\n",
            "ID: TRAIN_5569, AL645608.7: 0.21363215\n",
            "ID: TRAIN_5270, AL645608.7: 0.19225124\n",
            "ID: TRAIN_6911, AL645608.7: 0.16098672\n",
            "ID: TRAIN_0830, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_2398, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_3297, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_3530, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_5322, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_6378, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_6474, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_6546, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_6726, AL645608.7: 0.00050649385\n",
            "ID: TRAIN_1715, AL645608.7: 0.0005064938\n",
            "ID: TRAIN_2326, AL645608.7: 0.0005064938\n",
            "ID: TRAIN_5521, AL645608.7: 0.0005064938\n",
            "ID: TRAIN_6642, AL645608.7: 0.0005064938\n",
            "ID: TRAIN_0325, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_0331, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_0360, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_0549, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_0567, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_0595, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_0668, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_0914, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1105, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1138, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1142, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1157, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1211, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1359, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1426, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1479, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1600, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1748, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_1903, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2000, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2167, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2184, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2185, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2284, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2327, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2349, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2579, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2647, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2737, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2877, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2893, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2954, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_2979, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3014, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3029, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3100, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3138, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3326, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3400, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3423, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3479, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3485, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3706, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3753, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_3806, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4031, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4045, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4048, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4058, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4176, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4208, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4237, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4328, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4455, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4644, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4673, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4683, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4720, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4744, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4818, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4821, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4826, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_4862, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_5140, AL645608.7: 0.00050649355\n",
            "ID: TRAIN_5223, AL645608.7: 0.00050649355\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-26-a8fe21089da7>:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  print(f\"ID: {row[id_column_index]}, AL645608.7: {row['AL645608.7']}\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_100_HES4 = train_df.nlargest(100, 'HES4')\n",
        "for index, row in top_100_HES4.iterrows():\n",
        "  print(f\"ID:{row[id_column_index]}, HES4: {row['HES4']}\")\n",
        "  #HES4의 최댓값 100개를 보여주는 코드"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S9kbg014SMVE",
        "outputId": "6965a5ad-2ff6-4aff-fd7e-e86c3b71ba91"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ID:TRAIN_1927, HES4: 2.4219015\n",
            "ID:TRAIN_3667, HES4: 2.3893814\n",
            "ID:TRAIN_3964, HES4: 2.3569794\n",
            "ID:TRAIN_4378, HES4: 1.9252214\n",
            "ID:TRAIN_1126, HES4: 1.8979328\n",
            "ID:TRAIN_2847, HES4: 1.8849602\n",
            "ID:TRAIN_1565, HES4: 1.7773232\n",
            "ID:TRAIN_6738, HES4: 1.6932571\n",
            "ID:TRAIN_5825, HES4: 1.6911049\n",
            "ID:TRAIN_0998, HES4: 1.5648099\n",
            "ID:TRAIN_1970, HES4: 1.553374\n",
            "ID:TRAIN_0308, HES4: 1.4571337\n",
            "ID:TRAIN_2890, HES4: 1.4516492\n",
            "ID:TRAIN_3672, HES4: 1.4489577\n",
            "ID:TRAIN_5859, HES4: 1.417699\n",
            "ID:TRAIN_6484, HES4: 1.380334\n",
            "ID:TRAIN_6398, HES4: 1.3058255\n",
            "ID:TRAIN_5049, HES4: 1.3038895\n",
            "ID:TRAIN_3064, HES4: 1.2820878\n",
            "ID:TRAIN_5163, HES4: 1.2398182\n",
            "ID:TRAIN_2445, HES4: 1.2391192\n",
            "ID:TRAIN_5734, HES4: 1.2346084\n",
            "ID:TRAIN_2524, HES4: 1.2230655\n",
            "ID:TRAIN_5969, HES4: 1.20738\n",
            "ID:TRAIN_1530, HES4: 1.1761928\n",
            "ID:TRAIN_5999, HES4: 1.1460762\n",
            "ID:TRAIN_5715, HES4: 1.1203254\n",
            "ID:TRAIN_5822, HES4: 1.1132202\n",
            "ID:TRAIN_3460, HES4: 1.1116021\n",
            "ID:TRAIN_0643, HES4: 1.1069107\n",
            "ID:TRAIN_4154, HES4: 1.106302\n",
            "ID:TRAIN_3062, HES4: 1.0943685\n",
            "ID:TRAIN_5474, HES4: 1.0921181\n",
            "ID:TRAIN_1477, HES4: 1.0909966\n",
            "ID:TRAIN_1135, HES4: 1.0664779\n",
            "ID:TRAIN_1863, HES4: 1.0621113\n",
            "ID:TRAIN_4332, HES4: 1.059524\n",
            "ID:TRAIN_5274, HES4: 1.0555073\n",
            "ID:TRAIN_2012, HES4: 1.0537235\n",
            "ID:TRAIN_2122, HES4: 1.0499157\n",
            "ID:TRAIN_4812, HES4: 1.042441\n",
            "ID:TRAIN_6931, HES4: 1.0420067\n",
            "ID:TRAIN_3004, HES4: 1.0369697\n",
            "ID:TRAIN_5204, HES4: 1.0338306\n",
            "ID:TRAIN_5943, HES4: 1.021972\n",
            "ID:TRAIN_4786, HES4: 1.0156432\n",
            "ID:TRAIN_0210, HES4: 1.010702\n",
            "ID:TRAIN_5782, HES4: 0.99101734\n",
            "ID:TRAIN_1756, HES4: 0.98256344\n",
            "ID:TRAIN_6625, HES4: 0.95406014\n",
            "ID:TRAIN_1812, HES4: 0.9510968\n",
            "ID:TRAIN_1076, HES4: 0.9495352\n",
            "ID:TRAIN_6355, HES4: 0.9466437\n",
            "ID:TRAIN_1218, HES4: 0.9459059\n",
            "ID:TRAIN_3537, HES4: 0.9457887\n",
            "ID:TRAIN_1590, HES4: 0.9261863\n",
            "ID:TRAIN_2433, HES4: 0.92404324\n",
            "ID:TRAIN_0306, HES4: 0.92395055\n",
            "ID:TRAIN_0012, HES4: 0.9169869\n",
            "ID:TRAIN_4824, HES4: 0.9144779\n",
            "ID:TRAIN_4110, HES4: 0.9100861\n",
            "ID:TRAIN_6258, HES4: 0.9095039\n",
            "ID:TRAIN_5233, HES4: 0.90143687\n",
            "ID:TRAIN_4173, HES4: 0.89999455\n",
            "ID:TRAIN_6928, HES4: 0.8982068\n",
            "ID:TRAIN_0500, HES4: 0.8966135\n",
            "ID:TRAIN_3199, HES4: 0.88743305\n",
            "ID:TRAIN_5940, HES4: 0.88663846\n",
            "ID:TRAIN_1701, HES4: 0.88575417\n",
            "ID:TRAIN_6618, HES4: 0.88265425\n",
            "ID:TRAIN_6473, HES4: 0.8811407\n",
            "ID:TRAIN_4277, HES4: 0.8758972\n",
            "ID:TRAIN_4429, HES4: 0.86839885\n",
            "ID:TRAIN_5972, HES4: 0.8614763\n",
            "ID:TRAIN_1398, HES4: 0.85613674\n",
            "ID:TRAIN_1368, HES4: 0.8543882\n",
            "ID:TRAIN_4880, HES4: 0.851888\n",
            "ID:TRAIN_1074, HES4: 0.851522\n",
            "ID:TRAIN_4134, HES4: 0.84848154\n",
            "ID:TRAIN_2404, HES4: 0.8477301\n",
            "ID:TRAIN_1624, HES4: 0.8400139\n",
            "ID:TRAIN_6793, HES4: 0.83917934\n",
            "ID:TRAIN_5886, HES4: 0.83871484\n",
            "ID:TRAIN_3175, HES4: 0.83672523\n",
            "ID:TRAIN_2499, HES4: 0.8362613\n",
            "ID:TRAIN_3365, HES4: 0.8320743\n",
            "ID:TRAIN_3678, HES4: 0.8280563\n",
            "ID:TRAIN_5297, HES4: 0.8233351\n",
            "ID:TRAIN_0260, HES4: 0.8172962\n",
            "ID:TRAIN_2994, HES4: 0.8137113\n",
            "ID:TRAIN_6691, HES4: 0.80252296\n",
            "ID:TRAIN_5985, HES4: 0.80052364\n",
            "ID:TRAIN_3087, HES4: 0.7991966\n",
            "ID:TRAIN_3657, HES4: 0.78779906\n",
            "ID:TRAIN_0732, HES4: 0.7869252\n",
            "ID:TRAIN_5770, HES4: 0.7861782\n",
            "ID:TRAIN_5922, HES4: 0.78480786\n",
            "ID:TRAIN_4586, HES4: 0.7747356\n",
            "ID:TRAIN_1382, HES4: 0.7664577\n",
            "ID:TRAIN_5013, HES4: 0.7654758\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-27-51b97b861cef>:3: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  print(f\"ID:{row[id_column_index]}, HES4: {row['HES4']}\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "common = pd.merge(top_100_al645608, top_100_HES4, on='ID', suffixes=('_al645608', '_HES4'))  # suffixes를 사용하여 열 이름 변경 방지\n",
        "\n",
        "for index, row in common.iterrows():\n",
        "    print(f\"ID: {row['ID']}, AL645608.7: {row['AL645608.7_al645608']}, HES4: {row['HES4_HES4']}\") # 수정된 열 이름 사용\n",
        "\n",
        "# 결과 상 둘다 TOP 100에 들어가는 경우는 1번의 불과함 -> 상관관계 낮다? 확인해봐야함"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q8HfeLbuSjzF",
        "outputId": "dba8aef6-863c-4e4b-c66a-98600086d24b"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ID: TRAIN_4786, AL645608.7: 1.0095758, HES4: 1.0156432\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correlation = train_df[['AL645608.7','HES4']].corr().iloc[0,1]\n",
        "print(f\"Correlation between AL645608.7 and HES4:{correlation}\")\n",
        "#상관관계 0.023686481934577088"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sqpppg-jUef-",
        "outputId": "6cca5767-50d5-41c8-cab7-a6e29f59e838"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation between AL645608.7 and HES4:0.023686481934577088\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correlation = train_df[['AL645608.7','TNFRSF18']].corr().iloc[0,1]\n",
        "print(f\"Correlation between AL645608.7 and TNFRSF18:{correlation}\")\n",
        "#상관관계 -0.0012670017685664746"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2V_lXFkZUx8r",
        "outputId": "d2e9bd8c-1897-4f13-9cb9-ec49f0116003"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation between AL645608.7 and TNFRSF18:-0.0012670017685664746\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 모든 열 간의 상관관계 계산\n",
        "correlation_matrix = train_df.drop(columns=['ID','path']).corr()\n",
        "\n",
        "print(\"Correlation matrix:\")\n",
        "print(correlation_matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d3GVaLF8VLEx",
        "outputId": "cc0a45a0-51e3-41b0-9af4-1e876eb336f1"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation matrix:\n",
            "            AL645608.7      HES4  TNFRSF18   TNFRSF4      SDF4     ACAP3  \\\n",
            "AL645608.7    1.000000  0.023686 -0.001267  0.016405  0.001563  0.007685   \n",
            "HES4          0.023686  1.000000 -0.005291  0.015357  0.010745 -0.010940   \n",
            "TNFRSF18     -0.001267 -0.005291  1.000000 -0.002209  0.007187  0.066585   \n",
            "TNFRSF4       0.016405  0.015357 -0.002209  1.000000 -0.013316 -0.008895   \n",
            "SDF4          0.001563  0.010745  0.007187 -0.013316  1.000000  0.016796   \n",
            "...                ...       ...       ...       ...       ...       ...   \n",
            "MT-ND4        0.003198 -0.023652  0.006945  0.016659 -0.005586 -0.018794   \n",
            "MT-ND5       -0.002187 -0.028120 -0.031680 -0.001914  0.003337 -0.030486   \n",
            "MT-CYB        0.004295 -0.014118 -0.005346 -0.002168  0.001187 -0.037479   \n",
            "BX004987.1   -0.001909 -0.007869 -0.001123 -0.003747  0.011792 -0.002273   \n",
            "AL592183.1   -0.001925  0.005448 -0.001426 -0.004808  0.008383 -0.011839   \n",
            "\n",
            "              INTS11     MXRA8  AL391244.2  LINC01770  ...   MT-ATP8  \\\n",
            "AL645608.7  0.011781  0.003045   -0.003348  -0.001409  ... -0.003447   \n",
            "HES4       -0.007807  0.008843    0.002323  -0.005627  ... -0.013478   \n",
            "TNFRSF18   -0.007572  0.000214   -0.001933  -0.000641  ... -0.015861   \n",
            "TNFRSF4    -0.001637 -0.012073   -0.004514  -0.002839  ... -0.004367   \n",
            "SDF4        0.008376  0.001424    0.004270   0.012312  ... -0.016707   \n",
            "...              ...       ...         ...        ...  ...       ...   \n",
            "MT-ND4     -0.037636  0.000544   -0.043392  -0.002414  ...  0.500838   \n",
            "MT-ND5     -0.044392  0.000659   -0.022752   0.000052  ...  0.446270   \n",
            "MT-CYB     -0.034460 -0.006310   -0.000056   0.009625  ...  0.461142   \n",
            "BX004987.1  0.006246 -0.002800   -0.002601  -0.001343  ...  0.015191   \n",
            "AL592183.1  0.006145 -0.009594   -0.003049  -0.001749  ... -0.000135   \n",
            "\n",
            "             MT-ATP6    MT-CO3    MT-ND3   MT-ND4L    MT-ND4    MT-ND5  \\\n",
            "AL645608.7  0.002136  0.003844 -0.006515  0.004573  0.003198 -0.002187   \n",
            "HES4       -0.029020 -0.020272 -0.018834 -0.036274 -0.023652 -0.028120   \n",
            "TNFRSF18   -0.004446 -0.003353  0.003946 -0.014699  0.006945 -0.031680   \n",
            "TNFRSF4     0.019668  0.015121  0.012492  0.014914  0.016659 -0.001914   \n",
            "SDF4       -0.003856 -0.003292 -0.007671 -0.006959 -0.005586  0.003337   \n",
            "...              ...       ...       ...       ...       ...       ...   \n",
            "MT-ND4      0.808448  0.757545  0.765741  0.612976  1.000000  0.637025   \n",
            "MT-ND5      0.629543  0.599378  0.621792  0.531066  0.637025  1.000000   \n",
            "MT-CYB      0.787153  0.761881  0.757435  0.589071  0.783712  0.597513   \n",
            "BX004987.1  0.005063 -0.000785 -0.003368  0.011705  0.002887  0.002232   \n",
            "AL592183.1  0.001745  0.005470  0.006930  0.012739  0.002419  0.012835   \n",
            "\n",
            "              MT-CYB  BX004987.1  AL592183.1  \n",
            "AL645608.7  0.004295   -0.001909   -0.001925  \n",
            "HES4       -0.014118   -0.007869    0.005448  \n",
            "TNFRSF18   -0.005346   -0.001123   -0.001426  \n",
            "TNFRSF4    -0.002168   -0.003747   -0.004808  \n",
            "SDF4        0.001187    0.011792    0.008383  \n",
            "...              ...         ...         ...  \n",
            "MT-ND4      0.783712    0.002887    0.002419  \n",
            "MT-ND5      0.597513    0.002232    0.012835  \n",
            "MT-CYB      1.000000    0.001525    0.011470  \n",
            "BX004987.1  0.001525    1.000000   -0.002417  \n",
            "AL592183.1  0.011470   -0.002417    1.000000  \n",
            "\n",
            "[3467 rows x 3467 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correlation_matrix_10 = correlation_matrix.iloc[:10,:10]\n",
        "# 마스크 생성: 주 대각선 위치를 True로 설정\n",
        "np.fill_diagonal(correlation_matrix_10.values, np.nan)\n",
        "sns.heatmap(correlation_matrix_10, annot=True, fmt=\".4f\", cmap = 'coolwarm', square=True)\n",
        "plt.title('correlation Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "CjtYzBc9Z6Ai",
        "outputId": "af9d055f-e5b5-4f81-fb2e-cc3080cda94d"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BWDcV3rnd2Oe"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}